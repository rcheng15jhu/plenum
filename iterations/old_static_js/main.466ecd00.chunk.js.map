{"version":3,"sources":["components/Cell.js","components/EditableCell.js","components/Calendar.js","services/CalendarManager.js","pages/viewcalendar.js","index.js"],"names":["Cell","props","styles","border","width","height","textAlign","outline","unavailable","backgroundColor","style","className","day","value","time","EditableCell","useState","avail","setAvail","onClick","Calendar","template","file","calendar","Array","i","length","j","undefined","dates","console","log","times","date","map","keyList","key","val","editable","uploadTemplate","App","id","setId","calendars","setCalendars","setFile","useEffect","fetch","method","mode","then","res","json","data","updateActive","name","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.466ecd00.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nconst Cell = (props) => {\r\n    let styles = {border: '1px solid black', width: '25px', height: '25px', textAlign: 'center', outline: 'none'}\r\n\r\n    if (props.unavailable !== 'A') {\r\n        styles.backgroundColor = 'red'\r\n    }\r\n    return <td><button style={styles} className={\"day\" + props.day} value={props.time}/></td>\r\n};\r\n\r\nexport default Cell","import React, {useState} from \"react\";\r\n\r\nconst EditableCell = (props) => {\r\n    const [avail, setAvail] = useState(props.unavailable === 'A')\r\n    let styles = {border: '1px solid black', width: '25px', height: '25px', textAlign: 'center', outline: 'none'}\r\n\r\n    function flipState() {\r\n        setAvail(!avail)\r\n    }\r\n\r\n    if (!avail) {\r\n        styles.backgroundColor = 'red'\r\n    }\r\n    return <td><button onClick={flipState} style={styles} className={\"day\" + props.day} value={avail ? props.time : -1}/></td>\r\n};\r\n\r\nexport default EditableCell","import React from \"react\";\r\n\r\nimport Cell from './Cell'\r\nimport EditableCell from './EditableCell'\r\n\r\nconst Calendar = (props) => {\r\n    let template = props.file\r\n\r\n    let calendar = new Array(12)\r\n\r\n    for (let i = 0; i < calendar.length; i++) {\r\n        calendar[i] = new Array(7)\r\n    }\r\n\r\n    for (let i = 0; i < 12; i++) {\r\n        for (let j = 0; j < 7; j++) {\r\n            calendar[i][j] = 'A'\r\n        }\r\n    }\r\n\r\n    if(template.dates !== undefined) {\r\n        console.log(\"test\")\r\n        let dates = template.dates;\r\n        for (let i = 0; i < dates.length; i++) {\r\n            for (let j = 0; j < dates[i].times.length; j++) {\r\n                calendar[dates[i].times[j]][dates[i].date] = 'U'\r\n            }\r\n        }\r\n    }\r\n\r\n    const time = (val) => {\r\n        if (val === 0 || val === 6) {\r\n            return 12\r\n        }\r\n        return (val * 2) % 12\r\n    }\r\n\r\n    console.log(calendar)\r\n    return (\r\n        <table>\r\n            <thead>\r\n            <tr>\r\n                <th/>\r\n                <th>Su</th>\r\n                <th>M</th>\r\n                <th>T</th>\r\n                <th>W</th>\r\n                <th>Th</th>\r\n                <th>F</th>\r\n                <th>S</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                calendar.map((keyList, i) => (\r\n                    <tr key={i}>\r\n                        <td style={{textAlign: 'right'}}>{time(i)}</td>\r\n                        {(() => {\r\n                            if(props.editable !== undefined && props.editable === true)\r\n                                return keyList.map((key, j) =>\r\n                                    <EditableCell key={j} unavailable={key} time={i} day={j}/>\r\n                                )\r\n                            else\r\n                                return keyList.map((key, j) =>\r\n                                    <Cell key={j} unavailable={key} time={i} day={j}/>\r\n                                )\r\n                        })()}\r\n                    </tr>\r\n                ))\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n};\r\n\r\nexport default Calendar","function download(content) {\r\n    const a = document.createElement(\"a\");\r\n    const file = new Blob([JSON.stringify(content)], {type: \"application/json\"});\r\n    a.href = URL.createObjectURL(file);\r\n    a.download = \"template.json\";\r\n    a.click();\r\n    URL.revokeObjectURL(a.href);\r\n}\r\n\r\nfunction getObjToSave() {\r\n    let objToSave = {};\r\n    objToSave.dates = [];\r\n    for (let i = 0; i < 7; i++) {\r\n        const buttons = [...document.getElementsByClassName(\"day\" + i)];\r\n        console.log(buttons);\r\n        let times = [];\r\n        buttons.forEach(button => {\r\n            let value = parseInt(button.value);\r\n            console.log(value);\r\n            if(value !== -1)\r\n            times.push(value);\r\n        });\r\n        if(times.length !== 0) {\r\n            objToSave.dates.push({\r\n                date: i,\r\n                times: times\r\n            })\r\n        }\r\n    }\r\n    return objToSave;\r\n}\r\n\r\nfunction downloadTemplate() {\r\n    download(getObjToSave());\r\n    console.log(\"Test\");\r\n}\r\n\r\nfunction upload(content) {\r\n    fetch(\"/addcalendar?title=test\", {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n            // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        },body: JSON.stringify(content)\r\n    }).then(data => {\r\n        console.log(data);\r\n    });\r\n}\r\n\r\nfunction uploadTemplate() {\r\n        upload(getObjToSave());\r\n}\r\n\r\nexport default uploadTemplate","import React, {useState, useEffect} from \"react\";\r\nimport Calendar from \"../components/Calendar\";\r\nimport uploadTemplate from \"../services/CalendarManager.js\";\r\n\r\nconst App = () => {\r\n\r\n    const [id, setId] = useState(-1)\r\n\r\n    const [calendars, setCalendars] = useState([])\r\n\r\n    console.log(calendars)\r\n\r\n    const [file, setFile] = useState({})\r\n\r\n    useEffect(() => {\r\n        fetch('http://localhost:7000/calendar', {\r\n                method: 'GET',\r\n                mode: 'cors'\r\n            }\r\n        ).then(res => {\r\n            return res.json()\r\n        }).then(data => {\r\n            console.log(data)\r\n            setCalendars([...data])\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(id > 0) {\r\n            fetch('http://localhost:7000/calendar?id=' + id, {\r\n                    method: 'GET',\r\n                    mode: 'cors'\r\n                }\r\n            ).then(res => {\r\n                return res.json()\r\n            }).then(data => {\r\n                console.log(data)\r\n                setFile(data)\r\n            })\r\n        }\r\n    }, [id])\r\n\r\n    let updateActive = (id) => () => {\r\n        setId(id)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Calendar editable={false} file={file}/>\r\n            <div className=\"divContents\">\r\n                <ol>\r\n                    <p>\r\n                        {\r\n                            calendars.map(calendar => (\r\n                                <li key={calendar.id} className=\"content calendar\">\r\n                                    <i>{calendar.name}</i> Owned by\r\n                                    {\" \" + calendar.userId}.\r\n                                    <button onClick={updateActive(calendar.id)} className={calendar.userId}>View</button></li>\r\n                            ))\r\n                        }\r\n                    </p>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./pages/viewcalendar\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}