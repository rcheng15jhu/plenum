{"version":3,"sources":["components/TemplateBin.js","components/UserView.js","components/EventView.js","index.js"],"names":["TemplateBinCard","props","useState","isSelected","setIsSelected","color","setColor","onClick","removeFromSelectedTemplates","templateName","addToSelectedTemplates","style","Object","assign","TemplateBin","selectedTemplates","setSelectedTemplates","templates","map","template","name","fromChild","newSelectedTemplates","filter","updateSelectedTemplates","concat","Cell","styles","border","width","height","textAlign","unavailable","backgroundColor","key","UserView","view","Array","i","length","j","templatesToRender","includes","datesToRender","push","dates","forEach","times","date","colspan","text-align","row","val","cell","EventView","position","bottom","template1","template2","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77018fc0.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst TemplateBin = (props) => {\n    const [ selectedTemplates, setSelectedTemplates ] = useState([]) \n\n    function removeFromSelectedTemplates(fromChild) {\n        const newSelectedTemplates = selectedTemplates.filter(template => template !== fromChild)\n        setSelectedTemplates(newSelectedTemplates)\n        props.updateSelectedTemplates(newSelectedTemplates)\n    }\n\n    function addToSelectedTemplates(fromChild) {\n        const newSelectedTemplates = selectedTemplates.concat(fromChild)\n        setSelectedTemplates(newSelectedTemplates)\n        props.updateSelectedTemplates(newSelectedTemplates)\n    }\n\n    return (\n        <div>\n            {props.templates.map(template => \n                <TemplateBinCard \n                    templateName={template.name}\n                    removeFromSelectedTemplates={(fromChild) => removeFromSelectedTemplates(fromChild)}\n                    addToSelectedTemplates={(fromChild) => addToSelectedTemplates(fromChild)}\n                />\n            )}\n        </div>\n    )\n\n}\n\nconst TemplateBinCard = (props) => {\n    const styles = {\n        'font-size': '40px'\n    }\n\n    const [ isSelected, setIsSelected ] = useState(false)\n    const [ color, setColor ] = useState({})\n\n    const handleClick = () => {\n        if (isSelected) {\n            props.removeFromSelectedTemplates(props.templateName)\n            setColor({})\n            setIsSelected(false)\n        } else {\n            props.addToSelectedTemplates(props.templateName)\n            setColor({color: \"green\"})\n            setIsSelected(true)\n        }\n    }\n\n    return (\n        <button onClick={handleClick} style={Object.assign({}, color, styles)}>\n            {props.templateName}\n        </button>\n    )\n}\n\nexport default TemplateBin","import React from 'react'\n\nconst UserView = (props) => {\n  const templates = props.templates\n  const selectedTemplates = props.selectedTemplates\n\n  let view = new Array(12)\n\n  for (let i = 0; i < view.length; i++) {\n    view[i] = new Array(7)\n  }\n\n  for (let i = 0; i < 12; i++) {\n    for (let j = 0; j < 7; j++) {\n      view[i][j] = 'A'\n    }\n  }\n\n  const templatesToRender = templates.filter(template => selectedTemplates.includes(template.name))\n\n  const datesToRender = []\n  for (let i = 0; i < templatesToRender.length; i++) {\n    datesToRender.push(templatesToRender[i].dates)\n  }\n\n  datesToRender.forEach(template => {\n    for (let i = 0; i < template.length; i++) {\n      for (let j = 0; j < template[i].times.length; j++) {\n        view[template[i].times[j]][template[i].date] = 'U'\n      }\n    }\n  });\n\n  const time = (val) => {\n    if (val === 0 || val === 6) {\n      return 12\n    }\n    return (val * 2) % 12\n  }\n\n  return (\n    <div>\n      <table>\n        <thead>\n        <tr>\n          <th colspan=\"8\" text-align='center'>Me</th>\n        </tr>\n          <tr>\n            <th></th>\n            <th>Su</th>\n            <th>M</th>\n            <th>T</th>\n            <th>W</th>\n            <th>Th</th>\n            <th>F</th>\n            <th>S</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            view.map((row, i) => (\n              <tr key={i}>\n                <td style={{ textAlign: 'right' }}>{time(i)}</td>\n                {\n                  row.map((cell, j) =>\n                    <Cell key={j} unavailable={cell} />\n                  )\n                }\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    </div>\n\n  )\n}\n\n\nconst Cell = (props) => {\n  let styles = { border: '1px solid black', width: '25px', height: '25px', textAlign: 'center' }\n  if (props.unavailable === 'U') {\n    styles.backgroundColor = 'red'\n  }\n  return <td key={props.key} style={styles}></td>\n}\n\nexport default UserView","import React, { useState } from 'react'\nimport TemplateBin from './TemplateBin'\nimport UserView from './UserView'\n\nconst EventView = (props) => {\n\n    const [selectedTemplates, setSelectedTemplates] = useState([])\n\n    return (\n        <div>\n            <div>\n                <UserView\n                    templates={props.templates}\n                    selectedTemplates={selectedTemplates}\n                />\n            </div>\n            <h1 style={{width: '100%', textAlign: 'center', position: 'absolute', bottom: '130px'}}>Templates</h1>\n            <div style={{width: '100%', textAlign: 'center', position: 'absolute', bottom: '80px'}}>\n                <TemplateBin\n                    templates={props.templates}\n                    updateSelectedTemplates={(fromChild) => setSelectedTemplates(fromChild)}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default EventView","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport EventView from './components/EventView'\n\nconst template1 = {\"name\": \"Event0\",\"dates\":[{\"date\":1,\"times\":[0,1,2,3]},{\"date\":4,\"times\":[5,7,8,10]}]}\n\nconst template2 = {\"name\": \"Event1\",\"dates\":[{\"date\":1,\"times\":[6,7,8]},{\"date\":5,\"times\":[4]},{\"date\":6,\"times\":[5]}]}\n\nconst App = () => {\n    return (\n        <div>\n            <EventView templates={[template1, template2]} />\n        </div>\n    )\n}\n\nReactDOM.render(<App/>, document.getElementById('root'))"],"sourceRoot":""}