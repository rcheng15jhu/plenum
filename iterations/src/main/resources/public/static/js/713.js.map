{"version":3,"sources":["webpack://plenum/./src/components/cell.js","webpack://plenum/./src/components/editable-cell.js","webpack://plenum/./src/components/calendar.js"],"names":["props","styles","border","width","height","textAlign","outline","unavailable","backgroundColor","undefined","opacity","tooltip","users_avail","length","id","tooltip_id","place","effect","style","margin","padding","map","element","key","className","day","value","time","data-tip","data-for","useState","avail","setAvail","firstUpdate","useRef","onAvailChange","useEffect","current","onClick","template","file","calendar","Array","i","j","dates","console","log","times","date","keyList","val","editable"],"mappings":"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","file":"js/713.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\n\nconst cell = (props) => {\n    let styles = { border: '1px solid black', width: '25px', height: '25px', textAlign: 'center', outline: 'none' }\n\n    if (props.unavailable === 'A') {\n        styles.backgroundColor = 'red'\n    }\n\n    if (props.opacity !== undefined) {\n        styles.backgroundColor = `hsla(120, 50%, 50%, ${props.opacity}`\n    }\n\n    let tooltip = (props.users_avail === undefined || !props.users_avail.length)\n        ? null \n        : <ReactTooltip id={props.tooltip_id} place=\"top\" effect=\"solid\">\n            <ul style={{margin: '0', padding: '0'}}>\n                {props.users_avail.map(element => <li key={element}>{element}</li>)}\n            </ul>\n        </ReactTooltip>\n\n    return (\n        <td>\n            <button style={styles} className={\"day\" + props.day} value={props.time} data-tip data-for={props.tooltip_id} />\n            {tooltip}\n        </td>\n    )\n\n};\n\nexport default cell","import React, {useState, useEffect, useRef} from \"react\";\n\nconst editable_cell = (props) => {\n    const [avail, setAvail] = useState(props.unavailable === 'A')\n    const firstUpdate = useRef(true);\n\n    let styles = {border: '1px solid black', width: '25px', height: '25px', textAlign: 'center', outline: 'none'}\n\n    let onAvailChange = () => undefined;\n    if(props.onAvailChange !== undefined) {\n        onAvailChange = props.onAvailChange(props.day, props.time, avail);\n    }\n    useEffect(() => {\n        if(firstUpdate.current) {\n            firstUpdate.current = false;\n            return;\n        }\n        onAvailChange()\n    }, [avail])\n\n    function flipState() {\n        setAvail(!avail)\n    }\n\n    if (avail) {\n        styles.backgroundColor = 'red'\n    }\n    return <td><button onClick={flipState} style={styles} className={\"day\" + props.day} value={avail ? props.time : -1}/></td>\n};\n\nexport default editable_cell","import React from \"react\";\n\nimport Cell from './cell'\nimport EditableCell from './editable-cell'\n\nconst calendar = (props) => {\n    let template = props.file\n\n    let calendar = new Array(12)\n\n    for (let i = 0; i < calendar.length; i++) {\n        calendar[i] = new Array(7)\n    }\n\n    for (let i = 0; i < 12; i++) {\n        for (let j = 0; j < 7; j++) {\n            calendar[i][j] = 'U'\n        }\n    }\n\n    if(template !== undefined && template.dates !== undefined) {\n        console.log(\"test\")\n        let dates = template.dates;\n        for (let i = 0; i < dates.length; i++) {\n            for (let j = 0; j < dates[i].times.length; j++) {\n                calendar[dates[i].times[j]][dates[i].date] = 'A'\n            }\n        }\n    }\n\n    const time = (val) => {\n        if (val === 0 || val === 6) {\n            return 12\n        }\n        return (val * 2) % 12\n    }\n\n    console.log(calendar)\n    return (\n        <table>\n            <thead>\n            <tr>\n                <th/>\n                <th>Su</th>\n                <th>M</th>\n                <th>T</th>\n                <th>W</th>\n                <th>Th</th>\n                <th>F</th>\n                <th>S</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                calendar.map((keyList, i) => (\n                    <tr key={i}>\n                        <td style={{textAlign: 'right'}}>{time(i)}</td>\n                        {(() => {\n                            if(props.editable !== undefined && props.editable === true)\n                                return keyList.map((key, j) =>\n                                    <EditableCell key={j} onAvailChange={props.onAvailChange} unavailable={key} time={i} day={j}/>\n                                )\n                            else\n                                return keyList.map((key, j) =>\n                                    <Cell key={j} unavailable={key} time={i} day={j}/>\n                                )\n                        })()}\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    )\n};\n\nexport default calendar"],"sourceRoot":""}